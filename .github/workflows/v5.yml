name: Human Test Metrics v5

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repository (e.g. owner/name)"
        required: true
        type: string
      pr_number:
        description: "Pull request number"
        required: true
        type: string

jobs:
  analyze-pr:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo + PR
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

      - name: Set up reports directory
        run: mkdir -p reports/coverage reports/mutation reports/analysis

      # Detect language
      - name: Detect language
        id: detect
        run: |
          if [ -f "pom.xml" ]; then
            echo "lang=java" >> $GITHUB_OUTPUT
          elif ls *.kt 1> /dev/null 2>&1; then
            echo "lang=kotlin" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "lang=go" >> $GITHUB_OUTPUT
          elif ls *.py 1> /dev/null 2>&1; then
            echo "lang=python" >> $GITHUB_OUTPUT
          elif [ -f "CMakeLists.txt" ] || ls *.cpp 1> /dev/null 2>&1; then
            echo "lang=cpp" >> $GITHUB_OUTPUT
          else
            echo "lang=unknown" >> $GITHUB_OUTPUT
          fi

      # Python
      - name: Run Python analysis
        if: steps.detect.outputs.lang == 'python'
        run: |
          echo "== Compilation ==" > reports/compilation.log
          echo "Python does not need compilation" >> reports/compilation.log

          echo "== Tests ==" > reports/tests.log
          pytest --junitxml=reports/tests.xml || true

          echo "== Coverage ==" >> reports/tests.log
          pip install coverage mutmut flake8
          coverage run -m pytest || true
          coverage xml -o reports/coverage/python-coverage.xml
          mutmut run || true
          mutmut junitxml > reports/mutation/python-mutation.xml || true
          flake8 . > reports/analysis/python-flake8.log || true

      # Java
      - name: Run Java analysis
        if: steps.detect.outputs.lang == 'java'
        run: |
          echo "== Compilation ==" > reports/compilation.log
          mvn -B clean compile | tee -a reports/compilation.log || true

          echo "== Tests ==" > reports/tests.log
          mvn -B test | tee -a reports/tests.log || true

          mvn -B jacoco:report || true
          cp target/site/jacoco/jacoco.xml reports/coverage/java-coverage.xml || true

          mvn -B org.pitest:pitest-maven:mutationCoverage || true
          cp -r target/pit-reports/* reports/mutation/ || true

          mvn -B checkstyle:checkstyle || true
          cp target/checkstyle-result.xml reports/analysis/java-checkstyle.xml || true

      # Kotlin
      - name: Run Kotlin analysis
        if: steps.detect.outputs.lang == 'kotlin'
        run: |
          echo "== Compilation ==" > reports/compilation.log
          ./gradlew compileKotlin | tee -a reports/compilation.log || true

          echo "== Tests ==" > reports/tests.log
          ./gradlew test | tee -a reports/tests.log || true

          ./gradlew jacocoTestReport || true
          cp build/reports/jacoco/test/jacocoTestReport.xml reports/coverage/kotlin-coverage.xml || true

          ./gradlew pitest || true
          cp -r build/reports/pitest/* reports/mutation/ || true

          ./gradlew detekt || true
          cp build/reports/detekt/detekt.xml reports/analysis/kotlin-detekt.xml || true

      # Go
      - name: Run Go analysis
        if: steps.detect.outputs.lang == 'go'
        run: |
          echo "== Compilation ==" > reports/compilation.log
          go build ./... 2>&1 | tee -a reports/compilation.log || true

          echo "== Tests ==" > reports/tests.log
          go test ./... -v -coverprofile=reports/coverage/go-coverage.out | tee -a reports/tests.log || true

          go install github.com/gtramontina/ooze@latest
          ooze run ./... > reports/mutation/go-mutation.log || true

          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run ./... --out-format checkstyle > reports/analysis/go-lint.xml || true

      # C++
      - name: Run C++ analysis
        if: steps.detect.outputs.lang == 'cpp'
        run: |
          echo "== Compilation ==" > reports/compilation.log
          cmake -S . -B build && cmake --build build | tee -a reports/compilation.log || true

          echo "== Tests ==" > reports/tests.log
          cd build && ctest --output-on-failure | tee -a ../reports/tests.log || true

          cd ..
          lcov --capture --directory build --output-file reports/coverage/cpp-coverage.info || true

          echo "Mutation testing not available for C++ yet" > reports/mutation/cpp-mutation.txt

          cppcheck --xml --xml-version=2 . 2> reports/analysis/cpp-cppcheck.xml || true

      # Upload all reports as single artifact
      - name: Upload consolidated reports
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ github.event.inputs.pr_number }}-analysis
          path: reports
