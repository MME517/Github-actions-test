name: Analyze Java PR

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository name (owner/repo)'
        required: true
      pr:
        description: 'PR number'
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR from external repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: refs/pull/${{ inputs.pr }}/head

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download JaCoCo
        run: |
          curl -L https://github.com/jacoco/jacoco/releases/download/v0.8.13/jacoco-0.8.13.zip -o jacoco.zip
          unzip jacoco.zip
          mv lib/jacocoagent.jar .
          mv lib/jacococli.jar .

      - name: Download PITest jars
        run: |
          curl -L https://repo1.maven.org/maven2/org/pitest/pitest/1.20.2/pitest-1.20.2.jar -o pitest.jar
          curl -L https://repo1.maven.org/maven2/org/pitest/pitest-command-line/1.20.2/pitest-command-line-1.20.2.jar -o pitest-command-line.jar
          curl -L https://repo1.maven.org/maven2/org/pitest/pitest-junit5-plugin/1.2.1/pitest-junit5-plugin-1.2.1.jar -o pitest-junit5-plugin.jar

      - name: Build test smells detector
        run: |
          git clone https://github.com/TestSmells/TSDetect.git tsdetect
          cd tsdetect
          ./gradlew jar  # Assuming it has a jar task; adjust if needed (e.g., shadowJar)
          cd ..
          cp tsdetect/build/libs/*.jar TestSmellDetector.jar  # Assuming the output jar

      - name: Compilation check
        id: compile
        continue-on-error: true
        run: mvn compile

      - name: Echo compilation result
        run: |
          if [ ${{ steps.compile.outcome }} == 'success' ]; then
            echo "Compilation: Success"
          else
            echo "Compilation: Failed"
          fi

      - name: Run tests with coverage
        id: test
        continue-on-error: true
        run: mvn -DargLine="-javaagent:$(pwd)/jacocoagent.jar=destfile=jacoco.exec" test

      - name: Echo test execution result
        run: |
          if [ ${{ steps.test.outcome }} == 'success' ]; then
            echo "Test Execution: Success"
          else
            echo "Test Execution: Failed"
          fi

      - name: Generate coverage report
        if: always()
        run: java -jar jacococli.jar report jacoco.exec --classfiles target/classes --sourcefiles src/main/java --html coverage-report

      - name: Get coverage summary
        if: always()
        run: |
          # Simple parse of index.html for total coverage
          if [ -f coverage-report/index.html ]; then
            coverage=$(grep -oP '(?<=Total</td><td class="ctr2">)\d+%' coverage-report/index.html || echo "N/A")
            echo "Code Coverage: $coverage"
          else
            echo "Code Coverage: N/A"
          fi

      - name: Prepare for mutation testing
        if: always()
        run: |
          mvn dependency:build-classpath -Dmdep.includeScope=test -Dmdep.outputFile=cp.txt || true
          if [ -f cp.txt ]; then
            CP=$(cat cp.txt)
            FULL_CP="target/classes:target/test-classes:$CP"
            CLASSES=$(find target/classes -name '*.class' 2>/dev/null | sed 's|target/classes/||; s|/|.|g; s|\.class$||' | paste -sd ',' - || echo '*')
            TESTS=$(find target/test-classes -name '*.class' 2>/dev/null | sed 's|target/test-classes/||; s|/|.|g; s|\.class$||' | paste -sd ',' - || echo '*')
            echo "FULL_CP=$FULL_CP" >> $GITHUB_ENV
            echo "CLASSES=$CLASSES" >> $GITHUB_ENV
            echo "TESTS=$TESTS" >> $GITHUB_ENV
          else
            echo "FULL_CP=" >> $GITHUB_ENV
            echo "CLASSES=*" >> $GITHUB_ENV
            echo "TESTS=*" >> $GITHUB_ENV
          fi

      - name: Run mutation testing
        if: always()
        run: |
          if [ -n "${{ env.FULL_CP }}" ]; then
            java -cp pitest.jar:pitest-command-line.jar:pitest-junit5-plugin.jar:${{ env.FULL_CP }} org.pitest.mutationtest.commandline.MutationCoverageReport \
              --reportDir mutation-report \
              --targetClasses ${{ env.CLASSES }} \
              --targetTests ${{ env.TESTS }} \
              --sourceDirs src/main/java,src/test/java || true
          else
            echo "Skipping mutation testing due to classpath issues"
          fi

      - name: Get mutation summary
        if: always()
        run: |
          if [ -f mutation-report/index.html ]; then
            mutation_score=$(grep -oP '(?<=Mutation score</td><td>)\d+%' mutation-report/index.html || echo "N/A")
            echo "Mutation Score: $mutation_score"
          else
            echo "Mutation Score: N/A"
          fi

      - name: Run test smells detection
        if: always()
        run: java -jar TestSmellDetector.jar src/test/java || true

      - name: Get test smells summary
        if: always()
        run: |
          if [ -f output.csv ]; then  # Assuming output is output.csv
            smells_count=$(tail -n +2 output.csv | grep -o 'true' | wc -l || echo 0)
            echo "Detected Test Smells: $smells_count"
            cat output.csv
          else
            echo "Test Smells: N/A"
          fi

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: |
            coverage-report
            mutation-report
            *.csv
            jacoco.exec
