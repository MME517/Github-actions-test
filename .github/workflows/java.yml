name: Analyze Java PR

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository name (owner/repo)'
        required: true
      pr:
        description: 'PR number'
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR from external repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: refs/pull/${{ inputs.pr }}/head

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'  # Updated to Java 21
          distribution: 'temurin'

      - name: Download JaCoCo
        run: |
          curl -L https://github.com/jacoco/jacoco/releases/download/v0.8.13/jacoco-0.8.13.zip -o jacoco.zip
          unzip jacoco.zip
          mv lib/jacocoagent.jar .
          mv lib/jacococli.jar .

      - name: Compilation check
        id: compile
        continue-on-error: true
        run: |
          echo "::group::Compilation Output"
          mvn compile -e -X || echo "Compilation failed"
          echo "::endgroup::"
          if [[ "${{ steps.compile.outcome }}" == "success" ]]; then
            echo "Compilation: Success"
          else
            echo "Compilation: Failed"
          fi

      - name: Run tests with coverage
        id: test
        continue-on-error: true
        run: |
          echo "::group::Test Output"
          if [ -f "$(pwd)/jacocoagent.jar" ]; then
            mvn -DargLine="-javaagent:$(pwd)/jacocoagent.jar=destfile=jacoco.exec" test -e -X || echo "Tests failed"
          else
            echo "Tests failed: JaCoCo agent not found"
          fi
          echo "::endgroup::"
          if [[ "${{ steps.test.outcome }}" == "success" ]]; then
            echo "Test Execution: Success"
          else
            echo "Test Execution: Failed"
          fi

      - name: Generate coverage report
        if: always()
        run: |
          if [ -f jacoco.exec ]; then
            java -jar jacococli.jar report jacoco.exec --classfiles target/classes --sourcefiles src/main/java --html coverage-report
            coverage=$(grep -oP '(?<=Total</td><td class="ctr2">)\d+%' coverage-report/index.html || echo "N/A")
            echo "Code Coverage: $coverage"
          else
            echo "Code Coverage: N/A (jacoco.exec not found)"
            mkdir -p coverage-report
            echo "No coverage data" > coverage-report/index.html
          fi

      - name: Run mutation testing with Maven PITest
        if: always()
        continue-on-error: true
        run: |
          echo "::group::Mutation Testing Output"
          mvn org.pitest:pitest-maven:mutationCoverage \
            -DoutputFormats=HTML \
            -DreportsDirectory=mutation-report \
            -DtargetClasses='com.example.*' \  # Replace with project-specific package
            -DtargetTests='com.example.*' \
            -DexcludedClasses='org.pitest.*' || echo "Mutation testing failed"
          echo "::endgroup::"
          if [ -f mutation-report/index.html ]; then
            mutation_score=$(grep -oP '(?<=Mutation score</td><td>)\d+%' mutation-report/index.html || echo "N/A")
            echo "Mutation Score: $mutation_score"
          else
            echo "Mutation Score: N/A"
            mkdir -p mutation-report
            echo "No mutation data" > mutation-report/index.html
          fi

      - name: Run test smells detector
        if: always()
        continue-on-error: true
        run: |
          echo "::group::Test Smells Detection"
          # Placeholder: TSDetect requires specific execution (not a standalone JAR)
          echo "Test Smells: N/A (TSDetect execution method TBD)"
          # Example: Replace with actual command once clarified, e.g.:
          # git clone https://github.com/TestSmells/TSDetect.git tsdetect
          # cd tsdetect
          # ./gradlew run --args="path/to/src/test/java" || echo "Test smells detection failed"
          echo "Test Smells: N/A (detector not executable)"
          echo "::endgroup::"

      - name: Get test smells summary
        if: always()
        run: |
          if [ -f output.csv ]; then
            smells_count=$(tail -n +2 output.csv | grep -o 'true' | wc -l || echo 0)
            echo "Detected Test Smells: $smells_count"
            cat output.csv
          else
            echo "Test Smells: N/A (output.csv not found)"
            echo "No test smells data" > test-smells-report.txt
          fi

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: |
            coverage-report/
            mutation-report/
            *.csv
            jacoco.exec
            test-smells-report.txt
