name: Analyze Java PR

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository name (owner/repo)'
        required: true
      pr:
        description: 'PR number'
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR from external repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: refs/pull/${{ inputs.pr }}/head

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Download JaCoCo
        run: |
          curl -L https://github.com/jacoco/jacoco/releases/download/v0.8.13/jacoco-0.8.13.zip -o jacoco.zip
          unzip jacoco.zip
          mv lib/jacocoagent.jar .
          mv lib/jacococli.jar .

      - name: Ensure Maven POM exists
        run: |
          if [ ! -f pom.xml ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
                <modelVersion>4.0.0</modelVersion>
                <groupId>com.example</groupId>
                <artifactId>temp-project</artifactId>
                <version>1.0-SNAPSHOT</version>
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <version>3.14.0</version>
                            <configuration>
                                <source>21</source>
                                <target>21</target>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.pitest</groupId>
                            <artifactId>pitest-maven</artifactId>
                            <version>1.20.2</version>
                            <configuration>
                                <targetClasses>
                                    <param>com.example.*</param> <!-- Replace with project package -->
                                </targetClasses>
                                <targetTests>
                                    <param>com.example.*</param>
                                </targetTests>
                                <excludedClasses>
                                    <param>org.pitest.*</param>
                                </excludedClasses>
                                <outputFormats>
                                    <param>HTML</param>
                                </outputFormats>
                            </configuration>
                        </plugin>
                    </plugins>
                </build>
            </project>' > pom.xml
          fi

      - name: Compilation check
        id: compile
        continue-on-error: true
        run: |
          echo "::group::Compilation Output"
          mvn compile -e -X || echo "Compilation failed"
          echo "::endgroup::"
          if [[ "${{ steps.compile.outcome }}" == "success" ]]; then
            echo "Compilation: Success"
          else
            echo "Compilation: Failed"
          fi

      - name: Run tests with coverage
        id: test
        if: steps.compile.outcome == 'success'
        continue-on-error: true
        run: |
          echo "::group::Test Output"
          if [ -f "$(pwd)/jacocoagent.jar" ]; then
            mvn -DargLine="-javaagent:$(pwd)/jacocoagent.jar=destfile=jacoco.exec" test -e -X || echo "Tests failed"
          else
            echo "Tests failed: JaCoCo agent not found"
          fi
          echo "::endgroup::"
          if [[ "${{ steps.test.outcome }}" == "success" ]]; then
            echo "Test Execution: Success"
          else
            echo "Test Execution: Failed"
          fi

      - name: Generate coverage report
        if: always()
        run: |
          if [ -f jacoco.exec ]; then
            java -jar jacococli.jar report jacoco.exec --classfiles target/classes --sourcefiles src/main/java --html coverage-report
            coverage=$(grep -oP '(?<=Total</td><td class="ctr2">)\d+%' coverage-report/index.html || echo "N/A")
            echo "Code Coverage: $coverage"
            echo "COVERAGE=$coverage" >> $GITHUB_ENV
          else
            echo "Code Coverage: N/A (jacoco.exec not found)"
            mkdir -p coverage-report
            echo "No coverage data" > coverage-report/index.html
          fi

      - name: Run mutation testing with Maven PITest
        if: steps.compile.outcome == 'success'
        continue-on-error: true
        run: |
          echo "::group::Mutation Testing Output"
          mvn org.pitest:pitest-maven:1.20.2:mutationCoverage -e -X || echo "Mutation testing failed"
          echo "::endgroup::"
          if [ -f target/pit-reports/index.html ]; then
            mutation_score=$(grep -oP '(?<=Mutation score</td><td>)\d+%' target/pit-reports/index.html || echo "N/A")
            echo "Mutation Score: $mutation_score"
            echo "MUTATION_SCORE=$mutation_score" >> $GITHUB_ENV
            mv target/pit-reports mutation-report
          else
            echo "Mutation Score: N/A"
            mkdir -p mutation-report
            echo "No mutation data" > mutation-report/index.html
          fi

      - name: Run test smells detector
        if: always()
        continue-on-error: true
        run: |
          echo "::group::Test Smells Detection"
          # Placeholder: Use a hypothetical CLI tool or custom script
          echo "Test Smells: N/A (Using placeholder; replace with actual tool)"
          # Example: If using a tool like tsDetect CLI (hypothetical)
          # curl -L https://example.com/tsdetect-cli.jar -o tsdetect.jar
          # java -jar tsdetect.jar src/test/java --output output.csv || echo "Test smells detection failed"
          echo "No test smells data" > test-smells-report.txt
          echo "::endgroup::"

      - name: Get test smells summary
        if: always()
        run: |
          if [ -f output.csv ]; then
            smells_count=$(tail -n +2 output.csv | grep -o 'true' | wc -l || echo 0)
            echo "Detected Test Smells: $smells_count"
            echo "SMELLS_COUNT=$smells_count" >> $GITHUB_ENV
            cat output.csv
          else
            echo "Test Smells: N/A (output.csv not found)"
            echo "No test smells data" > test-smells-report.txt
          fi

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: |
            coverage-report/
            mutation-report/
            *.csv
            jacoco.exec
            test-smells-report.txt

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `**PR Analysis Summary**\n` +
                            `- Compilation: ${{ steps.compile.outcome == 'success' ? 'Success' : 'Failed' }}\n` +
                            `- Test Execution: ${{ steps.test.outcome == 'success' ? 'Success' : 'Failed' }}\n` +
                            `- Code Coverage: ${{ env.COVERAGE || 'N/A' }}\n` +
                            `- Mutation Score: ${{ env.MUTATION_SCORE || 'N/A' }}\n` +
                            `- Test Smells: ${{ env.SMELLS_COUNT || 'N/A' }}`;
            github.rest.issues.createComment({
              owner: '${{ inputs.repo.split('/')[0] }}',
              repo: '${{ inputs.repo.split('/')[1] }}',
              issue_number: ${{ inputs.pr }},
              body: summary
            });
