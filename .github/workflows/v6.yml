name: Human Test Metrics v6

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repository (e.g. owner/name)"
        required: true
        type: string
      pr_number:
        description: "Pull request number"
        required: true
        type: string
      language:
        description: "Project language"
        required: true
        type: choice
        options:
          - python
          - cpp
          - java
          - kotlin
          - go

jobs:
  test-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # Grant permissions to write comments on pull requests
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: refs/pull/${{ github.event.inputs.pr_number }}/head
          fetch-depth: 0 # Fetch all history for accurate analysis

      - name: Setup Python for parsing (always needed)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install common parsing dependencies
        run: pip install lxml pandas numpy

      # ===================================================================
      # Caching Steps for Different Languages
      # ===================================================================
      - name: Cache Pip packages
        if: ${{ github.event.inputs.language == 'python' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Maven packages
        if: ${{ github.event.inputs.language == 'java' || github.event.inputs.language == 'kotlin' }}
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
      
      - name: Cache Gradle packages
        if: ${{ github.event.inputs.language == 'java' || github.event.inputs.language == 'kotlin' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Go modules
        if: ${{ github.event.inputs.language == 'go' }}
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # ===================================================================
      # Python Project Steps
      # ===================================================================
      - name: Setup Python Project & Dependencies
        if: ${{ github.event.inputs.language == 'python' }}
        run: |
          pip install --upgrade pip wheel setuptools
          # A robust dependency installation script
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi
          if [ -f "pyproject.toml" ]; then 
            if grep -q "tool.poetry" pyproject.toml; then
              pip install poetry && poetry install --no-root
            else
              pip install ".[test]"
            fi
          elif [ -f "setup.py" ]; then pip install ".[test]"; fi
          pip install pytest pytest-cov mutmut

      - name: Run Python tests and coverage
        if: ${{ github.event.inputs.language == 'python' }}
        run: |
          set -o pipefail
          pytest --cov=. --cov-report=xml:coverage.xml --cov-report=html:htmlcov > pytest_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV

      - name: Run Python mutation testing
        if: ${{ github.event.inputs.language == 'python' }}
        run: |
          # Configure mutmut to find sources and use coverage to speed up
          mutmut run --use-coverage --paths-to-mutate . > mutmut_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          mutmut html && mutmut results > mutation_results.txt || true

      - name: Detect Python test smells
        if: ${{ github.event.inputs.language == 'python' }}
        run: |
          pip install flake8 radon
          flake8 --select=PT,AAA,T . > flake8_smells.txt || true
          radon cc --min B . | grep "test" > radon_smells.txt || true
          SMELL_COUNT=$(($(wc -l < flake8_smells.txt) + $(wc -l < radon_smells.txt)))
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ===================================================================
      # C++ Project Steps
      # ===================================================================
      - name: Setup C++ Environment
        if: ${{ github.event.inputs.language == 'cpp' }}
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential cmake lcov clang llvm mull-12 cppcheck

      - name: Build and test C++ with coverage
        if: ${{ github.event.inputs.language == 'cpp' }}
        run: |
          set -o pipefail
          # Configure, build, and test using CMake with coverage flags
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -G "Unix Makefiles"
          cmake --build build
          # Generate compile_commands.json needed for Mull
          cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          (cd build && ctest --output-on-failure) > ctest_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
          # Generate coverage report
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/build/*' --output-file coverage.info
          genhtml coverage.info --output-directory coverage_html
          lcov --summary coverage.info > coverage_summary.txt

      - name: Run C++ mutation testing with Mull
        if: ${{ github.event.inputs.language == 'cpp' }}
        run: |
          set -o pipefail
          # Find test executable
          TEST_EXEC=$(find build -type f -executable -name "*test*")
          if [ -n "$TEST_EXEC" ]; then
            mull-12 --reporters=Elements,Patches --report-dir=mull-report --report-name=mull --compdb=build/compile_commands.json $TEST_EXEC > mull_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
            cp mull-report/mull.html mull_report.html
          else
            echo "No test executable found for mutation testing."
            echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Detect C++ test smells
        if: ${{ github.event.inputs.language == 'cpp' }}
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem . 2> cppcheck_smells.txt || true
          SMELL_COUNT=$(wc -l < cppcheck_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ===================================================================
      # Java Project Steps
      # ===================================================================
      - name: Setup Java Environment (Maven/Gradle)
        if: ${{ github.event.inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Java tests, coverage, and mutation
        if: ${{ github.event.inputs.language == 'java' }}
        run: |
          set -o pipefail
          if [ -f "pom.xml" ]; then
            mvn clean install -DskipTests > build_log.txt 2>&1 || { echo "BUILD_FAILED=true" >> $GITHUB_ENV; exit 1; }
            mvn test > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
            # Run JaCoCo for coverage and PIT for mutation
            mvn org.jacoco:jacoco-maven-plugin:prepare-agent test org.jacoco:jacoco-maven-plugin:report
            mvn org.pitest:pitest-maven:mutationCoverage > pitest_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            ./gradlew build -x test > build_log.txt 2>&1 || { echo "BUILD_FAILED=true" >> $GITHUB_ENV; exit 1; }
            ./gradlew test > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
            ./gradlew jacocoTestReport pitest > gradle_plugins.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Detect Java test smells
        if: ${{ github.event.inputs.language == 'java' }}
        run: |
          # Using PMD for static analysis
          curl -L https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip -o pmd.zip
          unzip pmd.zip
          ./pmd-bin-6.55.0/bin/run.sh pmd -d src -R rulesets/java/junit.xml -f text > pmd_smells.txt || true
          SMELL_COUNT=$(wc -l < pmd_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ===================================================================
      # Kotlin Project Steps
      # ===================================================================
      - name: Setup Kotlin Environment (Gradle/Maven)
        if: ${{ github.event.inputs.language == 'kotlin' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run Kotlin tests, coverage, and mutation
        if: ${{ github.event.inputs.language == 'kotlin' }}
        run: |
          set -o pipefail
          # Kotlin projects predominantly use Gradle
          if [ -f "build.gradle.kts" ] || [ -f "build.gradle" ]; then
            ./gradlew build -x test > build_log.txt 2>&1 || { echo "BUILD_FAILED=true" >> $GITHUB_ENV; exit 1; }
            ./gradlew test > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
            ./gradlew jacocoTestReport pitest > gradle_plugins.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          else
            echo "Unsupported build system for Kotlin."
            echo "BUILD_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Detect Kotlin test smells
        if: ${{ github.event.inputs.language == 'kotlin' }}
        run: |
          # Using detekt for static analysis
          curl -L https://github.com/detekt/detekt/releases/download/v1.23.1/detekt-cli-1.23.1.zip -o detekt.zip
          unzip detekt.zip
          ./detekt-cli-1.23.1/bin/detekt-cli -i . -c .detekt.yml -r ".*Test.kt" > detekt_smells.txt || true
          SMELL_COUNT=$(wc -l < detekt_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ===================================================================
      # Go Project Steps
      # ===================================================================
      - name: Setup Go Environment
        if: ${{ github.event.inputs.language == 'go' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false # Caching is handled by a dedicated step

      - name: Run Go tests and coverage
        if: ${{ github.event.inputs.language == 'go' }}
        run: |
          set -o pipefail
          go mod tidy
          go test -v -coverprofile=coverage.out -covermode=atomic ./... > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
          go tool cover -html=coverage.out -o coverage.html
          # Convert to XML for parsing
          go install github.com/boumenot/gocover-cobertura@latest
          gocover-cobertura < coverage.out > coverage.xml

      - name: Run Go mutation testing
        if: ${{ github.event.inputs.language == 'go' }}
        run: |
          set -o pipefail
          go install github.com/go-mutesting/gomutate/cmd/gomutate@latest
          gomutate run --junit > gomutate_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          # Simple parsing for summary
          grep "The mutation score is" gomutate_output.txt > mutation_results.txt || true
      
      - name: Detect Go test smells
        if: ${{ github.event.inputs.language == 'go' }}
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2
          golangci-lint run ./... --out-format=line-number > golangci_smells.txt || true
          SMELL_COUNT=$(wc -l < golangci_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ===================================================================
      # Final Reporting Steps
      # ===================================================================
      - name: Parse Metrics
        if: always()
        id: parse_metrics
        run: |
          # A centralized Python script to parse results from any language
          python3 <<'END_OF_PYTHON'
          import os
          import re
          import xml.etree.ElementTree as ET
          from pathlib import Path

          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f'{name}={value}\n')

          # 1. Test Status
          test_status = "✅ Passed"
          if os.environ.get("env.TESTS_FAILED") == "true" or os.environ.get("env.BUILD_FAILED") == "true":
              test_status = "❌ Failed"
          set_output("test_status", test_status)

          # 2. Coverage
          coverage_pct = "N/A"
          if Path("coverage.xml").exists():
              try:
                  tree = ET.parse("coverage.xml").getroot()
                  line_rate = float(tree.get("line-rate", "0"))
                  coverage_pct = f"{line_rate * 100:.2f}%"
              except ET.ParseError:
                  coverage_pct = "Error"
          set_output("coverage", coverage_pct)

          # 3. Mutation Score
          mutation_score = "N/A"
          if os.environ.get("env.MUTATION_FAILED") == "true":
              mutation_score = "Error"
          elif Path("mutation_results.txt").exists():
              content = Path("mutation_results.txt").read_text()
              # Mutmut/GoMutate patterns
              match = re.search(r"(\d+\.\d+)%", content) or re.search(r"score is (\d+)", content)
              if match:
                  mutation_score = f"{float(match.group(1)):.2f}%"
          # PIT (Maven/Gradle)
          elif Path("target/pit-reports/mutations.xml").exists():
              tree = ET.parse("target/pit-reports/mutations.xml").getroot()
              total = len(tree.findall("mutation"))
              killed = len(tree.findall("mutation[status='KILLED']"))
              if total > 0:
                  mutation_score = f"{(killed / total) * 100:.2f}%"
          set_output("mutation_score", mutation_score)

          # 4. Test Smells
          smell_count = os.environ.get("env.SMELL_COUNT", "N/A")
          set_output("smell_count", smell_count)
          END_OF_PYTHON

      - name: Create Summary Comment
        if: always()
        id: summary
        run: |
          # Use a HEREDOC to create the multiline comment body
          COMMENT_BODY=$(cat <<EOF
          ### Human Test Metrics Report 📊

          **Repo:** \`${{ github.event.inputs.repo }}\`
          **PR:** \`#${{ github.event.inputs.pr_number }}\`
          **Language:** \`${{ github.event.inputs.language }}\`

          | Metric | Result |
          |---|---|
          | 🧪 **Test Execution** | ${{ steps.parse_metrics.outputs.test_status }} |
          | ☂️ **Code Coverage** | ${{ steps.parse_metrics.outputs.coverage }} |
          | 🧬 **Mutation Score** | ${{ steps.parse_metrics.outputs.mutation_score }} |
          | 👃 **Test Smells** | ${{ steps.parse_metrics.outputs.smell_count }} detected |

          *Detailed reports are available in the artifacts of this workflow run.*
          EOF
          )
          # Make the comment body available to subsequent steps
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Comment to PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: '${{ github.event.inputs.repo }}'.split('/')[1],
              issue_number: ${{ github.event.inputs.pr_number }},
              body: `${{ steps.summary.outputs.comment }}`
            });

      - name: Upload All Reports as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics-report-${{ github.event.inputs.language }}
          path: |
            # Common files
            *.txt
            *.log
            *.xml
            *.json
            # Language specific reports
            htmlcov/
            coverage_html/
            mull-report/
            mull_report.html
            target/site/jacoco/
            target/pit-reports/
            build/reports/
            coverage.html
            coverage.out
            # Smell reports
            *_smells.txt
