name: Human Test Metrics v6

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repository (e.g. owner/name)"
        required: true
        type: string
      pr_number:
        description: "Pull request number"
        required: true
        type: string
      language:
        description: "Project language (or 'all')"
        required: true
        type: choice
        options:
          - python
          - cpp
          - java
          - kotlin
          - go
          - all

jobs:
  test-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        lang: ${{ fromJSON(github.event.inputs.language == 'all' && '["python","cpp","java","kotlin","go"]' || format('["{0}"]', github.event.inputs.language)) }}

    env:
      REPO_SLUG: ${{ github.event.inputs.repo }}
      PR_NUMBER: ${{ github.event.inputs.pr_number }}
      LANG: ${{ matrix.lang }}

    steps:
      - name: Checkout PR code (HEAD of PR)
        id: checkout-head
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_SLUG }}
          ref: refs/pull/${{ env.PR_NUMBER }}/head
          fetch-depth: 0

      - name: Fallback to PR merge ref (if HEAD missing)
        if: failure()
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_SLUG }}
          ref: refs/pull/${{ env.PR_NUMBER }}/merge
          fetch-depth: 0

      - name: Setup Python (for parsing and misc tools)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install common parsing deps
        run: pip install --upgrade pip && pip install lxml pandas numpy

      # ==========================
      # CACHING
      # ==========================
      - name: Cache Pip
        if: ${{ env.LANG == 'python' || env.LANG == 'all' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.py') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Cache Maven
        if: ${{ env.LANG == 'java' || env.LANG == 'kotlin' }}
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Cache Gradle
        if: ${{ env.LANG == 'java' || env.LANG == 'kotlin' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Cache Go modules
        if: ${{ env.LANG == 'go' }}
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      # ==========================
      # PYTHON
      # ==========================
      - name: Setup Python Project & Dependencies
        if: ${{ env.LANG == 'python' }}
        run: |
          set -e
          pip install --upgrade pip wheel setuptools
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "requirements-dev.txt" ]; then pip install -r requirements-dev.txt; fi
          if [ -f "pyproject.toml" ]; then
            if grep -q "tool.poetry" pyproject.toml; then
              pip install poetry && poetry install --no-root
            else
              pip install ".[test]" || true
            fi
          elif [ -f "setup.py" ]; then pip install ".[test]" || true; fi
          pip install pytest pytest-cov mutmut

      - name: Run Python tests + coverage
        if: ${{ env.LANG == 'python' }}
        run: |
          set -o pipefail
          pytest --cov=. --cov-report=xml:coverage.xml --cov-report=html:htmlcov > pytest_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV

      - name: Run Python mutation testing (mutmut)
        if: ${{ env.LANG == 'python' }}
        run: |
          set -o pipefail
          mutmut run --use-coverage --paths-to-mutate . > mutmut_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          mutmut html || true
          mutmut results > mutation_results.txt || true

      - name: Detect Python test smells
        if: ${{ env.LANG == 'python' }}
        run: |
          pip install flake8 radon
          # Prefer scanning tests only to cut noise
          TEST_DIRS=$(git ls-files | grep -E '(^|/)(tests?|test_).*\.py$' || true)
          if [ -n "$TEST_DIRS" ]; then
            flake8 --select=PT,AAA,T $TEST_DIRS > flake8_smells.txt || true
            radon cc --min B $TEST_DIRS > radon_smells.txt || true
          else
            touch flake8_smells.txt radon_smells.txt
          fi
          SMELL_COUNT=$(( $(wc -l < flake8_smells.txt) + $(wc -l < radon_smells.txt) ))
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ==========================
      # C++
      # ==========================
      - name: Setup C++ Environment
        if: ${{ env.LANG == 'cpp' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake lcov clang llvm mull-12 cppcheck gcovr

      - name: Build & Test C++ with coverage
        if: ${{ env.LANG == 'cpp' }}
        run: |
          set -o pipefail
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -G "Unix Makefiles"
          cmake --build build
          # Export compile_commands for Mull
          cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          (cd build && ctest --output-on-failure) > ctest_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
          # Coverage: prefer gcovr to produce Cobertura XML
          gcovr -r . --xml-pretty -o coverage.xml || true
          # Also keep lcov/html for artifacts
          lcov --capture --directory . --output-file coverage.info || true
          lcov --remove coverage.info '/usr/*' '*/build/*' --output-file coverage.info || true
          genhtml coverage.info --output-directory coverage_html || true
          lcov --summary coverage.info > coverage_summary.txt || true

      - name: Run C++ mutation testing (Mull)
        if: ${{ env.LANG == 'cpp' }}
        run: |
          set -o pipefail
          TEST_EXEC=$(find build -type f -executable -name "*test*" | head -n1)
          if [ -n "$TEST_EXEC" ]; then
            mull-12 --reporters=Elements,Patches --report-dir=mull-report --report-name=mull --compdb=build/compile_commands.json "$TEST_EXEC" > mull_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
            # Try to extract a mutation score percentage if present
            grep -Eo '[0-9]+(\.[0-9]+)?%[^0-9]*(mutat|kill|score)?' mull_output.txt | head -n1 > mutation_results.txt || true
            # HTML convenience
            if [ -f mull-report/mull.html ]; then cp mull-report/mull.html mull_report.html; fi
          else
            echo "No test executable found for mutation testing."
            echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Detect C++ test smells
        if: ${{ env.LANG == 'cpp' }}
        run: |
          # Focus on likely test dirs to reduce noise
          TARGETS=$(git ls-files | grep -E '(^|/)(tests?|test_).*\.([ch]pp|cc|cxx)$' || true)
          if [ -z "$TARGETS" ]; then TARGETS="."; fi
          cppcheck --enable=all --suppress=missingIncludeSystem $TARGETS 2> cppcheck_smells.txt || true
          SMELL_COUNT=$(wc -l < cppcheck_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ==========================
      # JAVA
      # ==========================
      - name: Setup Java (Temurin 17)
        if: ${{ env.LANG == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Java tests, coverage, mutation
        if: ${{ env.LANG == 'java' }}
        shell: bash
        run: |
          set -o pipefail
          if [ -f "pom.xml" ]; then
            mvn -q -DskipTests clean install > build_log.txt 2>&1 || { echo "BUILD_FAILED=true" >> $GITHUB_ENV; exit 1; }
            mvn -q test > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
            mvn -q org.jacoco:jacoco-maven-plugin:prepare-agent test org.jacoco:jacoco-maven-plugin:report > jacoco_output.txt 2>&1 || true
            # Normalize coverage path
            if [ -f target/site/jacoco/jacoco.xml ]; then cp target/site/jacoco/jacoco.xml coverage.xml; fi
            mvn -q org.pitest:pitest-maven:mutationCoverage > pitest_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            chmod +x ./gradlew || true
            ./gradlew -q build -x test > build_log.txt 2>&1 || { echo "BUILD_FAILED=true" >> $GITHUB_ENV; exit 1; }
            ./gradlew -q test > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
            ./gradlew -q jacocoTestReport > jacoco_output.txt 2>&1 || true
            # Normalize coverage path (Gradle)
            if [ -f build/reports/jacoco/test/jacocoTestReport.xml ]; then cp build/reports/jacoco/test/jacocoTestReport.xml coverage.xml; fi
            ./gradlew -q pitest > gradle_pitest_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Detect Java test smells (PMD)
        if: ${{ env.LANG == 'java' }}
        run: |
          curl -sL https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip -o pmd.zip
          unzip -q pmd.zip
          TARGET_DIR="src/test/java"
          if [ ! -d "$TARGET_DIR" ]; then TARGET_DIR="src"; fi
          ./pmd-bin-6.55.0/bin/run.sh pmd -d "$TARGET_DIR" -R rulesets/java/junit.xml -f text > pmd_smells.txt || true
          SMELL_COUNT=$(wc -l < pmd_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ==========================
      # KOTLIN
      # ==========================
      - name: Setup Kotlin (Temurin 17)
        if: ${{ env.LANG == 'kotlin' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run Kotlin tests, coverage, mutation
        if: ${{ env.LANG == 'kotlin' }}
        run: |
          set -o pipefail
          if [ -f "build.gradle.kts" ] || [ -f "build.gradle" ]; then
            chmod +x ./gradlew || true
            ./gradlew -q build -x test > build_log.txt 2>&1 || { echo "BUILD_FAILED=true" >> $GITHUB_ENV; exit 1; }
            ./gradlew -q test > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
            ./gradlew -q jacocoTestReport > jacoco_output.txt 2>&1 || true
            if [ -f build/reports/jacoco/test/jacocoTestReport.xml ]; then cp build/reports/jacoco/test/jacocoTestReport.xml coverage.xml; fi
            ./gradlew -q pitest > gradle_pitest_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          else
            echo "Unsupported build system for Kotlin."
            echo "BUILD_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Detect Kotlin test smells (detekt)
        if: ${{ env.LANG == 'kotlin' }}
        run: |
          curl -sL https://github.com/detekt/detekt/releases/download/v1.23.1/detekt-cli-1.23.1.zip -o detekt.zip
          unzip -q detekt.zip
          TARGET_DIR="src/test/kotlin"
          if [ ! -d "$TARGET_DIR" ]; then TARGET_DIR="."; fi
          ./detekt-cli-1.23.1/bin/detekt-cli -i "$TARGET_DIR" -r txt:detekt_smells.txt || true
          SMELL_COUNT=$(wc -l < detekt_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ==========================
      # GO
      # ==========================
      - name: Setup Go
        if: ${{ env.LANG == 'go' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false

      - name: Run Go tests + coverage
        if: ${{ env.LANG == 'go' }}
        run: |
          set -o pipefail
          go mod tidy
          go test -v -coverprofile=coverage.out -covermode=atomic ./... > test_output.txt 2>&1 || echo "TESTS_FAILED=true" >> $GITHUB_ENV
          go tool cover -html=coverage.out -o coverage.html
          # Convert to Cobertura XML for normalization
          go install github.com/boumenot/gocover-cobertura@latest
          gocover-cobertura < coverage.out > coverage.xml

      - name: Run Go mutation testing (gomutate)
        if: ${{ env.LANG == 'go' }}
        run: |
          set -o pipefail
          go install github.com/go-mutesting/gomutate/cmd/gomutate@latest
          gomutate run --junit > gomutate_output.txt 2>&1 || echo "MUTATION_FAILED=true" >> $GITHUB_ENV
          grep -E "mutation score is[[:space:]]+[0-9]+(\.[0-9]+)?%" -i gomutate_output.txt | sed -E 's/.*( [0-9]+(\.[0-9]+)?%).*/\1/i' > mutation_results.txt || true

      - name: Detect Go test smells
        if: ${{ env.LANG == 'go' }}
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2
          golangci-lint run ./... --out-format=line-number > golangci_smells.txt || true
          SMELL_COUNT=$(wc -l < golangci_smells.txt)
          echo "SMELL_COUNT=$SMELL_COUNT" >> $GITHUB_ENV
          echo "$SMELL_COUNT test smells detected."

      # ==========================
      # PARSING + REPORTING
      # ==========================
      - name: Parse Metrics
        if: always()
        id: parse_metrics
        run: |
          python3 - <<'PY'
          import os, re, xml.etree.ElementTree as ET
          from pathlib import Path

          def out(name, value):
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'{name}={value}\n')

          # 1) Test/Bld status
          status = "✅ Passed"
          if os.environ.get("BUILD_FAILED") == "true" or os.environ.get("TESTS_FAILED") == "true":
            status = "❌ Failed"
          out("test_status", status)

          # 2) Coverage %
          cov = "Not Available"
          # Prefer normalized coverage.xml (Cobertura or JaCoCo)
          cov_file = Path("coverage.xml")
          if cov_file.exists():
            try:
              root = ET.parse(cov_file).getroot()
              # Cobertura root tag: 'coverage' with 'line-rate' attr
              lr = root.get("line-rate")
              if lr is not None:
                cov = f"{float(lr)*100:.2f}%"
              else:
                # JaCoCo: sum counters
                counters = root.findall(".//counter[@type='LINE']")
                if counters:
                  c = counters[0]
                  covered = int(c.get("covered","0"))
                  missed = int(c.get("missed","0"))
                  total = covered + missed
                  if total>0:
                    cov = f"{(covered/total)*100:.2f}%"
            except Exception:
              cov = "Error"
          out("coverage", cov)

          # 3) Mutation score
          score = "Not Available"
          if os.environ.get("MUTATION_FAILED") == "true":
            score = "Error"
          else:
            # Mutmut / gomutate / mull (txt)
            txt = ""
            for p in ["mutation_results.txt", "mutmut_output.txt", "gomutate_output.txt", "mull_output.txt"]:
              if Path(p).exists():
                try: txt += Path(p).read_text() + "\n"
                except: pass
            m = re.search(r'(\d+(?:\.\d+)?)\s*%', txt) or re.search(r'score is\s+(\d+(?:\.\d+)?)', txt, re.I)
            if m:
              score = f"{float(m.group(1)):.2f}%"
            # PIT (Maven/Gradle)
            pit_xmls = [Path("target/pit-reports/mutations.xml"),
                        Path("build/reports/pitest/mutations.xml")]
            for p in pit_xmls:
              if p.exists():
                try:
                  root = ET.parse(p).getroot()
                  muts = root.findall("mutation")
                  total = len(muts)
                  killed = len([x for x in muts if x.findtext("status") == "KILLED"])
                  if total>0:
                    score = f"{(killed/total)*100:.2f}%"
                  break
                except Exception:
                  pass
          out("mutation_score", score)

          # 4) Smells
          smells = "Not Available"
          for f in ["flake8_smells.txt","radon_smells.txt","cppcheck_smells.txt","pmd_smells.txt","detekt_smells.txt","golangci_smells.txt"]:
            if Path(f).exists():
              try:
                smells = str(sum(1 for _ in open(f,'r')))
              except:
                pass
          # Override if env SMELL_COUNT is set
          smells = os.environ.get("SMELL_COUNT", smells)
          out("smell_count", smells)
          PY

      - name: Build PR comment body
        if: always()
        id: summary
        run: |
          COMMENT_BODY=$(cat <<'EOF'
          ### Human Test Metrics Report 📊

          **Repo:** `${{ env.REPO_SLUG }}`
          **PR:** `#${{ env.PR_NUMBER }}`
          **Language:** `${{ env.LANG }}`

          | Metric | Result |
          |---|---|
          | 🧪 **Test Execution** | ${{ steps.parse_metrics.outputs.test_status }} |
          | ☂️ **Code Coverage** | ${{ steps.parse_metrics.outputs.coverage }} |
          | 🧬 **Mutation Score** | ${{ steps.parse_metrics.outputs.mutation_score }} |
          | 👃 **Test Smells** | ${{ steps.parse_metrics.outputs.smell_count }} detected |

          _Detailed reports are attached as workflow artifacts._
          EOF
          )
          {
            echo "comment<<EOF"
            echo "$COMMENT_BODY"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post comment to PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const [owner, repo] = process.env.REPO_SLUG.split('/');
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: Number(process.env.PR_NUMBER),
              body: `${{ steps.summary.outputs.comment }}`
            });

      - name: Upload reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics-${{ env.LANG }}
          path: |
            # General
            *.txt
            *.log
            *.xml
            *.json
            coverage.out
            coverage.info
            coverage.html
            coverage.xml
            # Python
            htmlcov/
            # C++
            coverage_html/
            mull-report/
            mull_report.html
            build/**/reports/**
            build/**/test-results/**
            # Java/Kotlin
            target/site/jacoco/
            target/pit-reports/
            build/reports/
            # Go
            # Smells
            *_smells.txt
          if-no-files-found: warn

