
name: Human Test Metrics v3

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repository (e.g. owner/name)"
        required: true
        type: string
      pr_number:
        description: "Pull request number"
        required: true
        type: string
      language:
        description: "Project language"
        required: true
        type: choice
        options:
          - python
          - cpp
          - java
          - kotlin
          - go

jobs:
  test-metrics:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: refs/pull/${{ github.event.inputs.pr_number }}/head
          fetch-depth: 0

      # --- Python ---
      - name: Setup Python
        if: ${{ github.event.inputs.language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        if: ${{ github.event.inputs.language == 'python' }}
        run: |
          pip install -r requirements.txt pytest pytest-cov mutmut lxml flake8 flake8-pytest-style

      - name: Run Python tests
        if: ${{ github.event.inputs.language == 'python' }}
        run: |
          set -o pipefail
          pytest --cov=. --cov-report=xml:coverage.xml --cov-context=test > pytest_output.txt 2>&1 || echo "TESTS_FAILED" > test_fail.txt
          mutmut run --runner "pytest" || echo "MUTATION_FAILED" > mutation_fail.txt
          mutmut results --xml > mutations.xml || true
          flake8 --select=PT --exit-zero tests/ > test_smells.txt || true

      - name: Upload test output
        if: ${{ github.event.inputs.language == 'python' }}
        uses: actions/upload-artifact@v4
        with:
          name: pytest-output
          path: pytest_output.txt

      # --- C++ ---
      - name: Install C++ tools
        if: ${{ github.event.inputs.language == 'cpp' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov gcovr cmake clang llvm libcurl4-openssl-dev
          curl -L https://github.com/mull-project/mull/releases/latest/download/mull-11.0.0-Ubuntu-20.04.deb -o mull.deb
          sudo dpkg -i mull.deb || true

      - name: Build & Test C++ with coverage
        if: ${{ github.event.inputs.language == 'cpp' }}
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_CXX_FLAGS="--coverage"
          make || echo "BUILD_FAILED" > ../build_fail.txt
          ctest || echo "TESTS_FAILED" > ../test_fail.txt
          gcovr -r .. --xml -o ../coverage.xml || true
          mull-runner . --reporters=IDE --output=../mutations.json || true

      # --- Java ---
      - name: Setup JDK
        if: ${{ github.event.inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Java tests
        if: ${{ github.event.inputs.language == 'java' }}
        run: |
          mvn clean test jacoco:report || echo "TESTS_FAILED" > test_fail.txt
          mvn org.pitest:pitest-maven:mutationCoverage || echo "MUTATION_FAILED" > mutation_fail.txt
          curl -L https://github.com/TestSmell/TestSmellDetector/releases/latest/download/TestSmellDetector.jar -o tsmelldetector.jar
          java -jar tsmelldetector.jar -p src/test/java -o test_smells.txt || true

      # --- Kotlin ---
      - name: Setup JDK for Kotlin
        if: ${{ github.event.inputs.language == 'kotlin' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Kotlin tests
        if: ${{ github.event.inputs.language == 'kotlin' }}
        run: |
          ./gradlew test koverXmlReport || echo "TESTS_FAILED" > test_fail.txt
          ./gradlew pitest || echo "MUTATION_FAILED" > mutation_fail.txt
          ./gradlew detektTestSmells || echo "" > test_smells.txt || true

      # --- Go ---
      - name: Setup Go
        if: ${{ github.event.inputs.language == 'go' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run Go tests
        if: ${{ github.event.inputs.language == 'go' }}
        run: |
          go test ./... -coverprofile=coverage.out || echo "TESTS_FAILED" > test_fail.txt
          go tool cover -func=coverage.out -o coverage.txt || true
          go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest
          $(go env GOPATH)/bin/go-mutesting ./... > mutest.json || true
          grep -r "TODO\\|FIXME" *_test.go > test_smells.txt || true

      # --- Debug File Structure ---
      - name: Debug file structure
        run: |
          find . -type f

      # --- Normalize Results ---
      - name: Parse and summarize metrics
        run: |
          python <<'EOF'
          import json, glob, os, xml.etree.ElementTree as ET, sqlite3

          language = "${{ github.event.inputs.language }}"

          coverage = None
          mutation = None
          build_success = not os.path.exists("build_fail.txt")
          execution_success = not os.path.exists("test_fail.txt")

          # --- Coverage ---
          cobertura_files = glob.glob("**/coverage*.xml", recursive=True)
          if cobertura_files and os.path.exists(cobertura_files[0]):
              try:
                  tree = ET.parse(cobertura_files[0])
                  root = tree.getroot()
                  if 'line-rate' in root.attrib:
                      coverage = float(root.attrib['line-rate']) * 100
              except Exception as e:
                  print(f"Failed to parse coverage.xml: {e}")
          else:
              print("No coverage.xml file found")

          jacoco_files = glob.glob("**/jacoco*.xml", recursive=True)
          if jacoco_files:
              tree = ET.parse(jacoco_files[0])
              counters = tree.findall(".//counter[@type='LINE']")
              if counters:
                  covered = int(counters[0].attrib['covered'])
                  missed = int(counters[0].attrib['missed'])
                  coverage = covered * 100.0 / (covered + missed)

          kover_files = glob.glob("**/kover.xml", recursive=True)
          if kover_files:
              tree = ET.parse(kover_files[0])
              counters = tree.findall(".//counter[@type='LINE']")
              if counters:
                  covered = int(counters[0].attrib['covered'])
                  missed = int(counters[0].attrib['missed'])
                  coverage = covered * 100.0 / (covered + missed)

          # --- Mutation ---
          pitest_files = glob.glob("**/pit-reports/**/mutations.xml", recursive=True)
          if pitest_files:
              tree = ET.parse(pitest_files[0])
              muts = tree.findall(".//mutation")
              killed = sum(1 for m in muts if m.find("status").text == "KILLED")
              total = len(muts)
              if total > 0:
                  mutation = killed * 100.0 / total

          mull_json = glob.glob("**/mutations.json", recursive=True)
          if mull_json:
              with open(mull_json[0]) as f:
                  data = json.load(f)
                  muts = data.get("mutants", [])
                  killed = sum(1 for m in muts if m.get("status") == "Killed")
                  total = len(muts)
                  if total > 0:
                      mutation = killed * 100.0 / total

          go_mutation = glob.glob("**/mutest.json", recursive=True)
          if go_mutation:
              with open(go_mutation[0]) as f:
                  try:
                      data = json.load(f)
                      killed = sum(1 for m in data if m.get("status") == "killed")
                      total = len(data)
                      if total > 0:
                          mutation = killed * 100.0 / total
                  except:
                      pass

          # --- Python Mutation (mutmut) ---
          mutmut_files = glob.glob("**/mutations.xml", recursive=True)
          if mutmut_files:
              try:
                  tree = ET.parse(mutmut_files[0])
                  root = tree.getroot()
                  muts = root.findall(".//mutation")
                  killed = sum(1 for m in muts if m.find("status").text.lower() == "killed")
                  total = len(muts)
                  if total > 0:
                      mutation = killed * 100.0 / total
              except Exception as e:
                  print(f"Failed to parse mutmut mutations.xml: {e}")
          else:
              mutmut_db = glob.glob("**/mutmut-cache", recursive=True)
              if mutmut_db:
                  try:
                      conn = sqlite3.connect(mutmut_db[0])
                      cursor = conn.cursor()
                      cursor.execute("SELECT status FROM mutant WHERE status IN ('killed', 'survived')")
                      results = cursor.fetchall()
                      total = len(results)
                      killed = sum(1 for r in results if r[0] == 'killed')
                      if total > 0:
                          mutation = killed * 100.0 / total
                      conn.close()
                  except Exception as e:
                      print(f"Failed to parse mutmut database: {e}")
              else:
                  print("No mutation files or database found for mutmut")

          # --- Test Smells ---
          test_smells = None
          if os.path.exists("test_smells.txt"):
              with open("test_smells.txt") as f:
                  test_smells = sum(1 for _ in f if _.strip())

          # --- Debug Null Metrics ---
          if coverage is None:
              print("Coverage is None: No valid coverage data found")
          if mutation is None:
              print("Mutation score is None: No valid mutation data found")

          result = {
              "repo": "${{ github.event.inputs.repo }}",
              "pr_number": "${{ github.event.inputs.pr_number }}",
              "language": language,
              "coverage": coverage,
              "mutation_score": mutation,
              "compilation_success": build_success,
              "execution_success": execution_success,
              "test_smells": test_smells
          }

          with open("metrics.json", "w") as f:
              json.dump(result, f, indent=2)

          print("== Final Metrics ==")
          print(json.dumps(result, indent=2))
          EOF

      - name: Upload metrics.json
        uses: actions/upload-artifact@v4
        with:
          name: metrics
          path: metrics.json
```
