name: Human Test Metrics vvv

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repository (e.g. owner/name)"
        required: true
        type: string
      pr_number:
        description: "Pull request number"
        required: true
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [python, cpp, java, kotlin, go]

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: refs/pull/${{ github.event.inputs.pr_number }}/head
          fetch-depth: 0

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Java
        if: matrix.language == 'java' || matrix.language == 'kotlin'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # ---------------- PYTHON ----------------
      - name: Install Python deps
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install pytest coverage mutmut flake8 || true
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Python tests
        if: matrix.language == 'python'
        run: |
          set +e
          pytest --maxfail=1 --disable-warnings -q \
            --junitxml=pytest-results.xml --cov=. --cov-report=xml
          echo $? > test_exit.txt

      - name: Python mutation testing
        if: matrix.language == 'python'
        run: |
          set +e
          mutmut run || true
          mutmut results > mutation_results.txt || true

      # ---------------- C++ ----------------
      - name: Install Mull for C++
        if: matrix.language == 'cpp'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm clang cmake
          curl -L https://github.com/mull-project/mull/releases/latest/download/mull-12.0.0-Ubuntu-22.04.deb -o mull.deb
          sudo apt install ./mull.deb || true

      - name: Build & Test (C++)
        if: matrix.language == 'cpp'
        run: |
          mkdir -p build && cd build
          cmake ..
          make -j$(nproc)
          ctest --output-on-failure || true

      - name: Mutation testing (C++)
        if: matrix.language == 'cpp'
        run: |
          mull-runner --report-name mutations.json . || true

      # ---------------- JAVA ----------------
      - name: Run Java tests with coverage
        if: matrix.language == 'java'
        run: |
          mvn -B test jacoco:report || true

      - name: Java PIT Mutation Testing
        if: matrix.language == 'java'
        run: |
          mvn -B org.pitest:pitest-maven:mutationCoverage || true

      # ---------------- KOTLIN ----------------
      - name: Run Kotlin tests
        if: matrix.language == 'kotlin'
        run: |
          ./gradlew test jacocoTestReport || true

      - name: Kotlin PIT mutation testing
        if: matrix.language == 'kotlin'
        run: |
          ./gradlew pitest || true

      - name: Run Detekt (optional)
        if: matrix.language == 'kotlin'
        run: |
          if [ -f detekt.yml ] || grep -q detekt build.gradle*; then
            ./gradlew detekt || true
          fi

      # ---------------- GO ----------------
      - name: Run Go tests
        if: matrix.language == 'go'
        run: |
          go test ./... -coverprofile=coverage.out || true
          go tool cover -func=coverage.out > coverage.txt || true

      - name: Go mutation testing
        if: matrix.language == 'go'
        run: |
          go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest
          go-mutesting ./... > mutation_results.txt || true

      # ---------------- COMMON ----------------
      - name: Upload metrics artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metrics-${{ matrix.language }}
          path: |
            **/coverage*.xml
            **/coverage*.out
            **/jacoco.xml
            **/pytest-results.xml
            **/mutation_results.txt
            **/mutations.json
            **/pit-reports/**
            **/detekt-report*.xml
          if-no-files-found: ignore

  collect:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Parse & Summarize Metrics
        run: |
          echo "Parsing collected metrics..."
          mkdir -p summary
          # naive summarizer - could be replaced by a Python script
          find artifacts -type f > summary/files.txt
          echo "=== Files collected ==="
          cat summary/files.txt

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: metrics-summary
          path: summary/
