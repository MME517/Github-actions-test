name: Test External PR

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository name in the format owner/repo'
        required: true
      pr_number:
        description: 'Pull Request number'
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      # Checkout the PR code from the specified external repository and PR number
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: refs/pull/${{ inputs.pr_number }}/head
          fetch-depth: 0 # Fetch full history for git diff

      # Set up Python environment with version 3.12
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Install project dependencies and required testing tools
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies if files exist
          for req_file in requirements.txt test-requirements.txt requirements-dev.txt; do
            if [ -f "$req_file" ]; then
              pip install -r "$req_file" || echo "Failed to install $req_file" >> $GITHUB_STEP_SUMMARY
            fi
          done
          # Install testing tools
          pip install pytest pytest-cov==4.1.0 mutatest flake8 pytest-asyncio || { echo "Failed to install testing tools" >> $GITHUB_STEP_SUMMARY; exit 1; }

      # Create a .coveragerc file to exclude non-Python files and directories
      - name: Configure coverage
        run: |
          echo "[run]" > .coveragerc
          echo "source = ." >> .coveragerc
          echo "omit =" >> .coveragerc
          echo "  *.html" >> .coveragerc
          echo "  *.md" >> .coveragerc
          echo "  *.json" >> .coveragerc
          echo "  *.yaml" >> .coveragerc
          echo "  templates/*" >> .coveragerc
          echo "  tests/*" >> .coveragerc
          echo "  docs/*" >> .coveragerc
          echo "  examples/*" >> .coveragerc
          echo "  scripts/*" >> .coveragerc

      # Check for syntax errors in Python code
      - name: Compilation check (syntax validation)
        id: compilation
        continue-on-error: true
        run: |
          echo "### Compilation Check" >> $GITHUB_STEP_SUMMARY
          if find . -name "*.py" | grep -q .; then
            python -m compileall -q . > comp_output.txt 2>&1
            comp_exit=$?
            cat comp_output.txt >> $GITHUB_STEP_SUMMARY
            if [ $comp_exit -eq 0 ]; then
              echo "status=Success" >> $GITHUB_OUTPUT
              echo "Success: No syntax errors." >> $GITHUB_STEP_SUMMARY
            else
              echo "status=Failure" >> $GITHUB_OUTPUT
              echo "Failure: Syntax errors found. See details above." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "status=Failure" >> $GITHUB_OUTPUT
            echo "Failure: No Python files found." >> $GITHUB_STEP_SUMMARY
          fi

      # Run tests and calculate code coverage
      - name: Run tests with coverage
        id: tests
        continue-on-error: true
        timeout-minutes: 10
        run: |
          echo "### Test Execution and Coverage" >> $GITHUB_STEP_SUMMARY
          # Run pytest with coverage, disabling warnings to reduce overhead
          pytest --cov=. --cov-report=term --cov-config=.coveragerc --disable-pytest-warnings > test_output.txt 2>&1 || true
          cat test_output.txt >> $GITHUB_STEP_SUMMARY
          # Extract coverage percentage
          cov_line=$(grep "TOTAL" test_output.txt | tail -1 | awk '{print $(NF)}' | sed 's/%//')
          if [ -n "$cov_line" ] && [[ "$cov_line" =~ ^[0-9]+$ ]]; then
            echo "coverage=$cov_line%" >> $GITHUB_OUTPUT
          else
            echo "coverage=0%" >> $GITHUB_OUTPUT
            echo "No coverage data found or no testable code. Check for non-Python files or configuration errors." >> $GITHUB_STEP_SUMMARY
          fi
          # Determine test execution status
          if grep -q "no tests ran" test_output.txt; then
            echo "status=Success (no tests)" >> $GITHUB_OUTPUT
            echo "No tests found to execute." >> $GITHUB_STEP_SUMMARY
          elif grep -q "failed" test_output.txt; then
            echo "status=Failure" >> $GITHUB_OUTPUT
            echo "Test failures detected." >> $GITHUB_STEP_SUMMARY
          elif grep -q "INTERNALERROR" test_output.txt; then
            echo "status=Failure" >> $GITHUB_OUTPUT
            echo "Internal error in test execution. See details above." >> $GITHUB_STEP_SUMMARY
          else
            echo "status=Success" >> $GITHUB_OUTPUT
            echo "All tests passed or skipped." >> $GITHUB_STEP_SUMMARY
          fi

      # Perform mutation testing on PR-changed files
      - name: Mutation testing
        id: mutation
        continue-on-error: true
        timeout-minutes: 15
        run: |
          echo "### Mutation Testing" >> $GITHUB_STEP_SUMMARY
          # Check if Python files exist (excluding tests)
          if find . -name "*.py" -not -path "./tests/*" | grep -q .; then
            # Get Python files changed in the PR (compare against main branch)
            git fetch origin main:main || git fetch origin master:master
            changed_files=$(git diff --name-only main...HEAD 2>/dev/null || git diff --name-only master...HEAD | grep -E '\.py$' | grep -v '^tests/' | head -n 1 || true)
            if [ -n "$changed_files" ]; then
              echo "Mutating changed file: $changed_files" >> $GITHUB_STEP_SUMMARY
              # Run mutatest with limit on locations (mutants)
              mutatest -s "$changed_files" -t "pytest" -n 10 -m s > mut_output.txt 2>&1 || true
              cat mut_output.txt >> $GITHUB_STEP_SUMMARY
              # Extract detected and total runs
              detected=$(grep -oP "DETECTED: \K\d+" mut_output.txt || echo 0)
              total=$(grep -oP "TOTAL RUNS: \K\d+" mut_output.txt || echo 0)
              if [ "$total" -gt 0 ]; then
                score=$(( (detected * 100) / total ))
                echo "score=${score}%" >> $GITHUB_OUTPUT
              else
                echo "score=0%" >> $GITHUB_OUTPUT
                echo "No mutants generated." >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "score=0%" >> $GITHUB_OUTPUT
              echo "No Python files changed in the PR (excluding tests)." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "score=0%" >> $GITHUB_OUTPUT
            echo "No Python files found for mutation testing (excluding tests)." >> $GITHUB_STEP_SUMMARY
          fi

      # Detect test smells using flake8 on test files
      - name: Detect test smells
        id: smells
        continue-on-error: true
        run: |
          echo "### Test Smells Detection" >> $GITHUB_STEP_SUMMARY
          # Check if test files exist
          if find . -type f -name "test_*.py" | grep -q .; then
            find . -type f -name "test_*.py" -exec flake8 {} + > smells_output.txt 2>&1 || true
            cat smells_output.txt >> $GITHUB_STEP_SUMMARY
            # Count issues as proxy for test smells
            smells_count=$(grep -c ":[0-9]*:[0-9]*:" smells_output.txt || echo 0)
            echo "smells=$smells_count" >> $GITHUB_OUTPUT
            if [ "$smells_count" -eq 0 ]; then
              echo "No test smells detected." >> $GITHUB_STEP_SUMMARY
            else
              echo "$smells_count test smells detected. See details above." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "smells=0" >> $GITHUB_OUTPUT
            echo "No test files found." >> $GITHUB_STEP_SUMMARY
          fi

      # Summarize all results in a clear format
      - name: Overall Summary
        run: |
          echo "## Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Compilation**: ${{ steps.compilation.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Execution**: ${{ steps.tests.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: ${{ steps.tests.outputs.coverage }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mutation Score**: ${{ steps.mutation.outputs.score }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Smells**: ${{ steps.smells.outputs.smells }}" >> $GITHUB_STEP_SUMMARY
