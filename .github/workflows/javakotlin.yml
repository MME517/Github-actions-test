name: PR Test Analysis Workflow

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Repository name (e.g. owner/repo)"
        required: true
        type: string
      pr_number:
        description: "Pull Request number"
        required: true
        type: string
      java_version:
        description: "Java version to use"
        required: false
        default: "21"
        type: string

jobs:
  analyze-pr:
    runs-on: ubuntu-latest
    steps:
      # Checkout base repo
      - name: Checkout base repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo_name }}
          path: base
          fetch-depth: 0

      # Fetch PR test files
      - name: Fetch PR test files
        run: |
          git clone https://github.com/${{ github.event.inputs.repo_name }} pr_repo
          cd pr_repo
          git fetch origin pull/${{ github.event.inputs.pr_number }}/head:pr_branch
          git checkout pr_branch
          mkdir -p ../tests
          rsync -av --include='*/' --include='**/*Test*.java' --include='**/*Test*.kt' --exclude='*' ./ ../tests/
          cd ..
          echo "Test files copied to ./tests"

      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ github.event.inputs.java_version }}

      # Build base project
      - name: Build base project
        working-directory: base
        run: |
          if [ -f "mvnw" ] || [ -f "pom.xml" ]; then
            ./mvnw clean install -DskipTests || mvn clean install -DskipTests
          elif [ -f "gradlew" ] || [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            ./gradlew build -x test || gradle build -x test
          else
            echo "No supported build tool found (Maven/Gradle)." && exit 1
          fi

      # Copy PR tests into base repo
      - name: Copy PR tests into base repo
        run: rsync -av ./tests/ ./base/src/test/

      # Run tests with coverage (JaCoCo)
      - name: Run Tests with Coverage
        working-directory: base
        run: |
          if [ -f "mvnw" ] || [ -f "pom.xml" ]; then
            ./mvnw test jacoco:report || mvn test jacoco:report
          else
            ./gradlew test jacocoTestReport || gradle test jacocoTestReport
          fi

      # Ensure PIT plugin for Maven projects
      - name: Inject PIT plugin if missing (Maven)
        if: hashFiles('base/pom.xml') != ''
        run: |
          if ! grep -q "pitest-maven" base/pom.xml; then
            echo "Injecting PIT plugin into pom.xml..."
            xmlstarlet ed -L \
              -s "/project/build" -t elem -n "pluginsTMP" -v "" \
              -s "/project/build/pluginsTMP" -t elem -n "plugin" -v "" \
              -s "/project/build/pluginsTMP/plugin" -t elem -n "groupId" -v "org.pitest" \
              -s "/project/build/pluginsTMP/plugin" -t elem -n "artifactId" -v "pitest-maven" \
              -s "/project/build/pluginsTMP/plugin" -t elem -n "version" -v "1.20.2" \
              -s "/project/build/pluginsTMP/plugin" -t elem -n "configuration" -v "" \
              -s "/project/build/pluginsTMP/plugin/configuration" -t elem -n "targetClasses" -v "*" \
              -s "/project/build/pluginsTMP/plugin/configuration" -t elem -n "targetTests" -v "*" \
              base/pom.xml
            xmlstarlet ed -L -r "/project/build/pluginsTMP" -v "plugins" base/pom.xml
          fi

      # Run mutation testing
      - name: Run Mutation Tests (PIT)
        working-directory: base
        run: |
          if [ -f "mvnw" ] || [ -f "pom.xml" ]; then
            ./mvnw org.pitest:pitest-maven:mutationCoverage || mvn org.pitest:pitest-maven:mutationCoverage
          elif [ -f "gradlew" ] || [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            ./gradlew pitest || gradle pitest
          fi

      # Detect test smells with TSDetect
      - name: Install TSDetect
        run: |
          curl -L https://github.com/TestSmells/TSDetect/releases/download/v1.0/TSDetect-1.0.jar -o tsdetect.jar

      - name: Run TSDetect
        run: |
          java -jar tsdetect.jar -p ./base/src/test -o ./base/tsdetect-report.json || echo "TSDetect failed"

      # Collect reports
      - name: Collect Reports
        run: |
          mkdir -p reports
          find base -name "jacoco.xml" -exec cp {} reports/coverage.xml \; || true
          find base -name "mutations.xml" -exec cp {} reports/mutation.xml \; || true
          find base -name "TEST-*.xml" -exec cp {} reports/ \; || true
          cp base/tsdetect-report.json reports/tsdetect.json || true

      # Generate summary
      - name: Generate Summary
        run: |
          echo "## Test Results Summary" > summary.md
          echo "### Compilation & Execution" >> summary.md
          echo "- âœ… Build succeeded" >> summary.md
          echo "### Coverage" >> summary.md
          if [ -f reports/coverage.xml ]; then
            COVERED=$(xmllint --xpath 'string(//counter[@type="INSTRUCTION"]/@covered)' reports/coverage.xml 2>/dev/null || echo "N/A")
            MISSED=$(xmllint --xpath 'string(//counter[@type="INSTRUCTION"]/@missed)' reports/coverage.xml 2>/dev/null || echo "N/A")
            if [ "$COVERED" != "N/A" ] && [ "$MISSED" != "N/A" ]; then
              TOTAL=$((COVERED+MISSED))
              PERCENT=$((100*COVERED/TOTAL))
              echo "- Coverage: $PERCENT% ($COVERED/$TOTAL instructions)" >> summary.md
            else
              echo "- Coverage: Not available" >> summary.md
            fi
          else
            echo "- Coverage: Not available" >> summary.md
          fi
          echo "### Mutation Testing" >> summary.md
          if [ -f reports/mutation.xml ]; then
            KILLED=$(xmllint --xpath 'count(//mutation[status="KILLED"])' reports/mutation.xml 2>/dev/null || echo "0")
            TOTAL=$(xmllint --xpath 'count(//mutation)' reports/mutation.xml 2>/dev/null || echo "0")
            if [ "$TOTAL" -gt 0 ]; then
              SCORE=$((100*KILLED/TOTAL))
              echo "- Mutation Score: $SCORE% ($KILLED/$TOTAL)" >> summary.md
            else
              echo "- Mutation Score: Not available" >> summary.md
            fi
          else
            echo "- Mutation Score: Not available" >> summary.md
          fi
          echo "### Test Smells" >> summary.md
          if [ -f reports/tsdetect.json ]; then
            echo "- TSDetect report generated" >> summary.md
          else
            echo "- Test Smells: Not available" >> summary.md
          fi

      # Upload artifacts
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: pr-analysis-reports
          path: |
            reports/
            summary.md

