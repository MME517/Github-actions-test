# .github/workflows/pr-test-analysis.yml

name: PR Test Analysis

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Target repository (owner/repo)'
        required: true
        type: string
      pr_number:
        description: 'Pull Request number'
        required: true
        type: string

jobs:
  analyze-pr-tests:
    name: Analyze PR Test Quality and Coverage
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: read
      checks: write # Needed for annotations and summary
      pull-requests: write

    env:
      JAVA_VERSION: '17'
      GRADLE_OPTS: '-Dorg.gradle.daemon=false'

    steps:
      # Step 1: Checkout the base code (the main branch at PR base)
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: refs/pull/${{ inputs.pr_number }}/base
          path: base

      # Step 2: Checkout PR branch (for test files only)
      - name: Checkout PR branch (test files only)
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: refs/pull/${{ inputs.pr_number }}/head
          path: pr

      - name: Copy PR test files into base code (retain only test files)
        run: |
          find pr -type f \( -name '*Test.java' -o -name '*Tests.java' -o -name '*Spec.kt' -o -name '*Test.kt' \) > changed_tests.txt
          while read testfile; do
            # Remove the leading 'pr/' and copy to 'base/'
            target="base/${testfile#pr/}"
            mkdir -p "$(dirname "$target")"
            cp "$testfile" "$target"
          done < changed_tests.txt

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Gradle dependencies
        id: cache-gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('base/**/*.gradle*', 'base/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Prepare gradle wrapper
        run: cd base && chmod +x ./gradlew

      # Step 3: Compile code and check status
      - name: Compile code
        id: compile
        run: |
          cd base
          ./gradlew classes testClasses
        continue-on-error: true

      # Step 4: Run tests (captures execution and test success)
      - name: Run all tests
        id: test
        run: |
          cd base
          ./gradlew test --continue --no-daemon || true
        continue-on-error: true

      # Step 5: Generate code coverage report with JaCoCo
      - name: Generate JaCoCo report
        if: always()
        run: |
          cd base
          ./gradlew jacocoTestReport
        continue-on-error: true

      - name: Upload JaCoCo report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'jacoco-report'
          path: base/build/reports/jacoco/test/html

      # Step 6: Mutation testing with PIT
      - name: Run mutation tests (PIT)
        if: always()
        run: |
          cd base
          ./gradlew pitest
        continue-on-error: true

      - name: Upload PIT report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'pitest-report'
          path: base/build/reports/pitest

      # Step 7: Test Smell Detection (Java/JUnit)
      - name: Download TestSmellDetector
        if: always()
        run: wget -O detector.jar https://github.com/TestSmells/TestSmellDetector/releases/latest/download/TestSmellDetector.jar

      - name: Collect test files for smell analysis
        if: always()
        run: |
          cd base
          find . -name "*Test.java" > testfiles.csv

      - name: Run Test Smell Detection
        if: always()
        run: |
          java -jar detector.jar -f base/testfiles.csv -g numerical -o base/test-smells.txt -t default

      - name: Upload Test Smell Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'testsmell-report'
          path: base/test-smells.txt

      # Step 8: Upload test result artifacts (JUnit XML, logs)
      - name: Upload JUnit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'junit-test-results'
          path: base/build/test-results/test

      # Step 9: Generate Workflow Summary in Markdown
      - name: Publish Markdown workflow summary
        if: always()
        run: |
          {
            echo '## 🚦 PR Test Analysis Summary'
            echo ''
            echo '| Metric | Result |'
            echo '|--------|--------|'
            echo "| Compilation Success | $([[ \${{ steps.compile.outcome }} == 'success' ]] && echo '✅' || echo '❌') |"
            echo "| Test Execution Success | $([[ \${{ steps.test.outcome }} == 'success' ]] && echo '✅' || echo '❌') |"
            echo '| [JaCoCo Coverage Report](./artifacts/jacoco-report) | Generated |'
            echo '| [Mutation Testing Report](./artifacts/pitest-report) | Generated |'
            echo '| [Test Smell Report](./artifacts/testsmell-report) | Generated |'
            echo '| [JUnit XML Test Results](./artifacts/junit-test-results) | Generated |'
            echo ''
            echo 'See individual artifacts for full details.'
          } >> $GITHUB_STEP_SUMMARY

      # Optionally, annotate failed tests or failed compilation 
      - name: Annotate failed test results
        if: failure()
        uses: dorny/test-reporter@v2
        with:
          name: 'JUnit Tests'
          path: base/build/test-results/test/TEST-*.xml
          reporter: junit
          fail-on-error: false

